# .github/workflows/release.yml

name: Combined Release Workflow

# 允许手动触发工作流
on:
  workflow_dispatch:

jobs:
  # 构建工作：在多个平台上运行并上传工件
  build:
    name: ${{ matrix.os }} Build
    runs-on: ${{ matrix.os }}

    # 使用矩阵策略在 Windows 和 Linux 上同时运行
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：设置 Rust 工具链
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 步骤3：构建项目（发布模式）
      - name: Build project
        run: cargo build --release

      # 步骤4：获取项目元数据（项目名和版本号）
      - name: Get Project Metadata
        id: metadata
        run: |
          PROJECT_NAME=$(grep '^name = ' Cargo.toml | sed -E 's/name = "(.+)"/\1/')
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.+)"/\1/')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # 步骤5：重命名可执行文件
      - name: Rename executable
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            mv target/release/${{ env.PROJECT_NAME }}.exe "${{ env.PROJECT_NAME }}-${{ env.VERSION }}.exe"
          } else {
            mv target/release/${{ env.PROJECT_NAME }} "${{ env.PROJECT_NAME }}-${{ env.VERSION }}"
          }
        shell: pwsh

      # 步骤6：上传构建好的工件
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.os }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ env.VERSION }}.exe
            ${{ env.PROJECT_NAME }}-${{ env.VERSION }}

  # 发布工作：在所有构建完成后执行
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    # 为此工作授予写入权限
    permissions:
      contents: write

    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：下载所有工件
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # 步骤3：获取项目版本号
      - name: Get Project Version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.+)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # 步骤4：创建 GitHub Release 并附加所有工件
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
