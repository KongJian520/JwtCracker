name: 构建&发布

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: 构建
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            extension: ""
          - os: windows-latest
            platform: windows
            arch: x86_64
            extension: ".exe"

    steps:
      - name: 签出
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 下载依赖(Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libgl-dev libglu1-mesa-dev

      - name: 查找缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 构建
        run: |
          cargo build --release --locked --all-features

      - name: 获取项目版本 (Linux)
        if: matrix.os == 'ubuntu-latest'
        id: get-version
        run: |
          VERSION=$(grep -E '^version\s*=' Cargo.toml | head -1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 获取项目版本 (Windows)
        if: matrix.os == 'windows-latest'
        id: get-version
        shell: pwsh
        run: |
          $VERSION = (Get-Content Cargo.toml | Select-String -Pattern '^version\s*=') -replace '^version\s*=\s*"([^"]+)".*$', '$1'
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 重命名并上传CLI二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-${{ matrix.platform }}-${{ matrix.arch }}-CLI-v${{ steps.get-version.outputs.version }}
          path: target/release/JwtCrackerCLI${{ matrix.extension }}

      - name: 重命名并上传GUI二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-${{ matrix.platform }}-${{ matrix.arch }}-GUI-v${{ steps.get-version.outputs.version }}
          path: target/release/JwtCrackerGUI${{ matrix.extension }}


  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: 签出
        uses: actions/checkout@v4

      - name: 下载所有附件
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 列表下载的附件
        run: ls -R ./artifacts

      - name: 生成发布说明主体
        id: release_body
        run: |
          SHASUM_TABLE=$(echo -e "| 文件名 | SHA256 值 |\n| :--- | :--- |")
          
          for file_dir in artifacts/*; do
            if [ -d "$file_dir" ]; then
              for file in "$file_dir"/*; do
                filename=$(basename "$file")
                shasum=$(sha256sum "$file" | cut -d ' ' -f 1)
                SHASUM_TABLE=$(echo -e "$SHASUM_TABLE\n| $filename | \`$shasum\` |")
              done
            fi
          done
          
          BODY=$(echo -e "## 文件校验\n\n为了验证下载文件的完整性，请使用以下 SHA256 校验和：\n\n$SHASUM_TABLE")
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: ${{ steps.release_body.outputs.body }}
          files: artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}