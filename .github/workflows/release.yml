name: 构建&发布

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: 构建
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: 签出
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 下载依赖(Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libgl-dev libglu1-mesa-dev

      - name: 查找缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 构建
        run: |
          cargo build --release --locked --all-features

      - name: Upload Linux CLI Binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-linux-CLI
          path: target/release/JwtCrackerCLI
          if-no-files-found: error

      - name: Upload Linux GUI Binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-linux-GUI
          path: target/release/JwtCrackerGUI
          if-no-files-found: error

      - name: Upload Windows CLI Binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-windows-CLI
          path: target/release/JwtCrackerCLI.exe
          if-no-files-found: error

      - name: Upload Windows GUI Binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-windows--GUI
          path: target/release/JwtCrackerGUI.exe
          if-no-files-found: error

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 下载所有附件
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: ls -R ./artifacts

      - name: Get Project Version
        id: version
        run: |
          # 更健壮的版本提取方法
          VERSION=$(cargo metadata --format-version 1 --no-deps | grep -oP '"version":"\K[^"]+' | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Prepare release assets
        run: |
          # 创建发布目录并整理文件
          mkdir -p release_assets
          find ./artifacts -type f -exec cp {} release_assets/ \;
          echo "Release assets prepared:"
          ls -la release_assets/

      - name: Generate Release Notes Body
        id: release_body
        run: |
          SHASUM_TABLE=$(echo -e "| 文件名 | SHA256 值 |\n| :--- | :--- |")
          
          for file in release_assets/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              shasum=$(sha256sum "$file" | cut -d ' ' -f 1)
              SHASUM_TABLE=$(echo -e "$SHASUM_TABLE\n| $filename | \`$shasum\` |")
            fi
          done
          
          BODY=$(echo -e "## 文件校验\n\n为了验证下载文件的完整性，请使用以下 SHA256 校验和：\n\n$SHASUM_TABLE")
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ steps.release_body.outputs.body }}
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}