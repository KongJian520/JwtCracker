name: Combined Release Workflow

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libgl-dev libglu1-mesa-dev

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binaries
        run: |
          cargo build --release --locked --all-features

      - name: Run tests
        run: cargo test --verbose

      - name: Upload Linux Binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-linux
          path: target/release/JwtCrackerCLI
          if-no-files-found: error

      - name: Upload Windows Binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-windows
          path: target/release/JwtCrackerCLI.exe
          if-no-files-found: error

      - name: Upload macOS Binary
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-macos
          path: target/release/JwtCrackerCLI
          if-no-files-found: error

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get Project Version
        id: version
        run: |
          VERSION=$(grep -E '^version\s*=' Cargo.toml | head -1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          VERSION=$(echo "$VERSION" | tr -d '\n\r')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes Body
        id: release_body
        run: |
          SHASUM_TABLE=$(echo -e "| 文件名 | SHA256 值 |\n| :--- | :--- |")
          
          for file in artifacts/*/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              shasum=$(sha256sum "$file" | cut -d ' ' -f 1)
              SHASUM_TABLE=$(echo -e "$SHASUM_TABLE\n| $filename | \`$shasum\` |")
            fi
          done
          
          BODY=$(echo -e "## 文件校验\n\n为了验证下载文件的完整性，请使用以下 SHA256 校验和：\n\n$SHASUM_TABLE")
          
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ steps.release_body.outputs.release_body }}
          files: artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}