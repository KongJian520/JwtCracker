name: Combined Release Workflow

on:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            extension: ""
          - os: windows-latest
            extension: ".exe"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust dependencies and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build project
        run: cargo build --release --all-features --bins

      - name: Get Project Metadata
        id: metadata
        run: |
          # 使用更可靠的方法提取项目名称和版本
          PROJECT_NAME=$(grep -E '^name\s*=' Cargo.toml | head -1 | sed -E 's/name\s*=\s*"([^"]+)".*/\1/')
          VERSION=$(grep -E '^version\s*=' Cargo.toml | head -1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          
          # 确保值不包含换行符或特殊字符
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr -d '\n\r')
          VERSION=$(echo "$VERSION" | tr -d '\n\r')
          
          # 使用正确的格式设置环境变量
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV
          
          # 添加调试信息
          echo "Extracted PROJECT_NAME: $PROJECT_NAME"
          echo "Extracted VERSION: $VERSION"

      - name: Rename executables
        run: |
          # 使用更安全的重命名方法
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ -f "target/release/JwtCrackerGUI.exe" ]; then
              mv "target/release/JwtCrackerGUI.exe" "${{ env.PROJECT_NAME }}-${{ env.VERSION }}-GUI.exe"
            fi
            if [ -f "target/release/JwtCrackerCLI.exe" ]; then
              mv "target/release/JwtCrackerCLI.exe" "${{ env.PROJECT_NAME }}-${{ env.VERSION }}-CLI.exe"
            fi
          else
            if [ -f "target/release/JwtCrackerGUI" ]; then
              mv "target/release/JwtCrackerGUI" "${{ env.PROJECT_NAME }}-${{ env.VERSION }}-GUI"
            fi
            if [ -f "target/release/JwtCrackerCLI" ]; then
              mv "target/release/JwtCrackerCLI" "${{ env.PROJECT_NAME }}-${{ env.VERSION }}-CLI"
            fi
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.os }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-GUI${{ matrix.extension }}
            ${{ env.PROJECT_NAME }}-${{ env.VERSION }}-CLI${{ matrix.extension }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get Project Version
        id: version
        run: |
          VERSION=$(grep -E '^version\s*=' Cargo.toml | head -1 | sed -E 's/version\s*=\s*"([^"]+)".*/\1/')
          VERSION=$(echo "$VERSION" | tr -d '\n\r')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes Body
        id: release_body
        run: |
          SHASUM_TABLE=$(echo -e "| 文件名 | SHA256 值 |\n| :--- | :--- |")
          
          for file in artifacts/*/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              shasum=$(sha256sum "$file" | cut -d ' ' -f 1)
              SHASUM_TABLE=$(echo -e "$SHASUM_TABLE\n| $filename | \`$shasum\` |")
            fi
          done

          BODY=$(echo -e "## 文件校验\n\n为了验证下载文件的完整性，请使用以下 SHA256 校验和：\n\n$SHASUM_TABLE")
          
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ steps.release_body.outputs.release_body }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}