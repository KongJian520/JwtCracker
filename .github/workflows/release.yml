name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    outputs:
      version: ${{ steps.get_version.outputs.PROJECT_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get project version
        id: get_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d '"' -f 2)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 确保 Rust 的 MSVC 工具链已安装
          # `rustup target add x86_64-pc-windows-msvc`
          # 如果需要构建 GUI 版本，需要安装 C++ build tools
          # 例如 `vcpkg` 或 `choco install visualstudio2019buildtools`
          # 这里为了简化，假设环境已准备好

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # 安装构建 GUI 所需的依赖，如 x11, gtk, libxcb 等
          sudo apt-get update
          sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build release for Linux (x86_64)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # 构建 CLI 和 GUI 两个版本
          cargo build --release --bin JwtCrackerCLI
          cargo build --release --bin JwtCrackerGUI

      - name: Build release for Windows (x86_64)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 构建 CLI 和 GUI 两个版本
          cargo build --release --bin JwtCrackerCLI
          cargo build --release --bin JwtCrackerGUI

      - name: Prepare artifacts for upload (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # 为 Linux 版本的二进制文件创建目录和重命名
          mkdir artifacts_linux
          mv target/release/JwtCrackerCLI artifacts_linux/JWTCracker-x86_64-linux-${{ env.PROJECT_VERSION }}
          mv target/release/JwtCrackerGUI artifacts_linux/JWTCracker-x86_64-linux-${{ env.PROJECT_VERSION }}-gui

      - name: Prepare artifacts for upload (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 为 Windows 版本的二进制文件创建目录和重命名
          mkdir artifacts_windows
          mv target/release/JwtCrackerCLI.exe artifacts_windows/JWTCracker-x86_64-windows-${{ env.PROJECT_VERSION }}.exe
          mv target/release/JwtCrackerGUI.exe artifacts_windows/JWTCracker-x86_64-windows-${{ env.PROJECT_VERSION }}-gui.exe

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-linux-artifacts
          path: artifacts_linux/

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JWTCracker-windows-artifacts
          path: artifacts_windows/

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: 签出
        uses: actions/checkout@v4

      - name: 下载所有附件
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 列表下载的附件
        run: ls -R ./artifacts

      - name: 生成发布说明主体
        id: release_body
        run: |
          SHASUM_TABLE=$(echo -e "| 文件名 | SHA256 值 |\n| :--- | :--- |")
          
          for file_dir in artifacts/*; do
            if [ -d "$file_dir" ]; then
              for file in "$file_dir"/*; do
                filename=$(basename "$file")
                shasum=$(sha256sum "$file" | cut -d ' ' -f 1)
                SHASUM_TABLE=$(echo -e "$SHASUM_TABLE\n| $filename | \`$shasum\` |")
              done
            fi
          done
          
          BODY=$(echo -e "## 文件校验\n\n为了验证下载文件的完整性，请使用以下 SHA256 校验和：\n\n$SHASUM_TABLE")
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: ${{ steps.release_body.outputs.body }}
          files: artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}