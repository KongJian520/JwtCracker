# .github/workflows/release.yml

name: Release

# 手动触发工作流
on:
  workflow_dispatch:

# 定义一个变量来获取 Cargo.toml 中的版本号
env:
  CARGO_VERSION: ${{ fromJson(github.event.client_payload.version) }}

jobs:
  # 构建工作：在多个平台上运行
  build:
    name: ${{ matrix.os }} Build
    runs-on: ${{ matrix.os }}
    
    # 使用矩阵策略在 Windows 和 Linux 上同时运行
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：获取项目名和版本号
      # 这里使用 'jq' 工具解析 Cargo.toml，并设置环境变量
      - name: Get Project Name and Version
        id: metadata
        run: |
          # 从 Cargo.toml 中获取项目名和版本号
          PROJECT_NAME=$(grep '^name = ' Cargo.toml | sed -E 's/name = "(.+)"/\1/')
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.+)"/\1/')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # 步骤3：设置 Rust 环境
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 步骤4：构建项目（发布模式）
      - name: Build project
        run: cargo build --release

      # 步骤5：重命名可执行文件并上传为工件
      - name: Rename and upload artifact
        run: |
          # 针对不同操作系统设置不同的文件扩展名
          if ("${{ matrix.os }}" == "windows-latest") {
            $binaryPath = "target/release/${{ env.PROJECT_NAME }}.exe"
            $newName = "${{ env.PROJECT_NAME }}-${{ env.VERSION }}.exe"
          } else {
            $binaryPath = "target/release/${{ env.PROJECT_NAME }}"
            $newName = "${{ env.PROJECT_NAME }}-${{ env.VERSION }}"
          }
          
          # 重命名文件
          mv $binaryPath $newName
          
          # 上传重命名后的文件作为工件
          echo "上传 $newName"
          
          # GitHub Actions 的上传工件操作
          # name 命名要区分 Windows 和 Linux
          $artifactName = "${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ matrix.os }}"
          
          actions/upload-artifact@v4
            with:
              name: $artifactName
              path: $newName
        shell: pwsh

  # 发布工作：等待构建完成后执行
  release:
    name: Create GitHub Release
    # 依赖于 'build' 工作，确保它在所有构建完成后才运行
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：获取项目版本号，用于 Release 标签
      - name: Get Project Version
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.+)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # 步骤3：下载所有构建好的工件
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # 步骤4：创建 GitHub Release 并附加所有工件
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # Release 的标签（例如 v1.0.0）
          tag_name: v${{ env.VERSION }}
          # Release 的标题
          name: Release v${{ env.VERSION }}
          # 将所有下载的工件附加到 Release
          files: artifacts/*/*
          # GitHub Token 权限
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
